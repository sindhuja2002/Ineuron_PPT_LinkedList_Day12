#question 7
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next


def merge_lists(first, second):
    if first is None:
        return second

    if second is None:
        return first

    current = first
    while first is not None and second is not None:
        first_next = first.next
        second_next = second.next

        first.next = second
        second.next = first_next

        first = first_next
        second = second_next

    return current


def print_linked_list(head):
    while head is not None:
        print(head.val, end=" ")
        head = head.next
    print()


# Example usage
# Example 1
first_head = ListNode(5)
first_head.next = ListNode(7)
first_head.next.next = ListNode(17)
first_head.next.next.next = ListNode(13)
first_head.next.next.next.next = ListNode(11)

second_head = ListNode(12)
second_head.next = ListNode(10)
second_head.next.next = ListNode(2)
second_head.next.next.next = ListNode(4)
second_head.next.next.next.next = ListNode(6)

print("Before:")
print("First List: ", end="")
print_linked_list(first_head)
print("Second List: ", end="")
print_linked_list(second_head)

first_head = merge_lists(first_head, second_head)

print("\nAfter:")
print("First List: ", end="")
print_linked_list(first_head)
print("Second List: ", end="")
print_linked_list(second_head)

# Example 2
first_head = ListNode(1)
first_head.next = ListNode(2)
first_head.next.next = ListNode(3)

second_head = ListNode(4)
second_head.next = ListNode(5)
second_head.next.next = ListNode(6)
second_head.next.next.next = ListNode(7)
second_head.next.next.next.next = ListNode(8)

print("\nBefore:")
print("First List: ", end="")
print_linked_list(first_head)
print("Second List: ", end="")
print_linked_list(second_head)

first_head = merge_lists(first_head, second_head)

print("\nAfter:")
print("First List: ", end="")
print_linked_list(first_head)
print("Second List: ", end="")
print_linked_list(second_head)

#TC - O(N)----N - no. of nodes in ll
#SC - O(1)
