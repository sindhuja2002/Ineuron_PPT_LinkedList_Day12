#question 1
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next


def delete_middle_node(head):
    if head is None or head.next is None:
        return None

    slow_ptr = head
    fast_ptr = head
    prev_ptr = None

    while fast_ptr is not None and fast_ptr.next is not None:
        fast_ptr = fast_ptr.next.next
        prev_ptr = slow_ptr
        slow_ptr = slow_ptr.next

    prev_ptr.next = slow_ptr.next

    return head


def print_linked_list(head):
    while head is not None:
        print(head.val, end=" ")
        head = head.next
    print()


# Example usage

# Example 1
head = ListNode(1)
head.next = ListNode(2)
head.next.next = ListNode(3)
head.next.next.next = ListNode(4)
head.next.next.next.next = ListNode(5)

print("Input:")
print_linked_list(head)

head = delete_middle_node(head)

print("Output:")
print_linked_list(head)

# Example 2
head = ListNode(2)
head.next = ListNode(4)
head.next.next = ListNode(6)
head.next.next.next = ListNode(7)
head.next.next.next.next = ListNode(5)
head.next.next.next.next.next = ListNode(1)

print("Input:")
print_linked_list(head)

head = delete_middle_node(head)

print("Output:")
print_linked_list(head)

#TC - O(N)----N - no. of nodes in ll
#SC - O(1)
